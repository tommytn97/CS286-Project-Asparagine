install.packagees('readr')
install.packages('readr')
install.packages(Rtools)
install.packages("pkgbuild")
PATH="${RTOOLS40_HOME}\usr\bin;${PATH}"
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
install.packages("jsonlite", type = "source")
list.of.packages <- c(
"shiny", "shinyAce", "shinyBS", "plotly",
"RSQLite", "gplots",
"ggplot2", "dplyr", #"tidyverse",
"plotly",
"e1071", "reshape2", "DT",
"data.table", "Rcpp","WGCNA","flashClust","statmod","biclust","igraph","Rtsne",
"visNetwork", "BiocManager"
)
list.of.bio.packages  <- c(
"limma", "DESeq2", "edgeR", "gage", "PGSEA", "fgsea", "ReactomePA", "pathview", "PREDA",
"impute", "runibic","QUBIC","rhdf5", "STRINGdb",
"PREDAsampledata", "sfsmisc", "lokern", "multtest", "hgu133plus2.db",
"org.Ag.eg.db","org.At.tair.db","org.Bt.eg.db","org.Ce.eg.db","org.Cf.eg.db",
"org.Dm.eg.db","org.EcK12.eg.db","org.EcSakai.eg.db","org.Gg.eg.db",
"org.Hs.eg.db","org.Mm.eg.db","org.Mmu.eg.db","org.Pf.plasmo.db",
"org.Pt.eg.db","org.Rn.eg.db","org.Sc.sgd.db","org.Ss.eg.db","org.Xl.eg.db"
)
if(1) { # remove all old packages, to solve problem caused by Bioconductor upgrade
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
# head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
# head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
}
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
new.bio.packages <- list.of.bio.packages[!(list.of.bio.packages %in% installed.packages()[,"Package"])]
notInstalledPackageCount = length(new.packages) + length(new.bio.packages)
#Install Require packages
while(notInstalledPackageCount != 0){
if(length(new.packages)) install.packages(new.packages, repos="http://cran.rstudio.com/", dependencies=TRUE, quiet=TRUE)
if(length(new.bio.packages)){
BiocManager::install(new.bio.packages, ask = FALSE, dependencies=TRUE, quiet=TRUE)
}
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
new.bio.packages <- list.of.bio.packages[!(list.of.bio.packages %in% installed.packages()[,"Package"])]
if( notInstalledPackageCount == length(new.packages) + length(new.bio.packages) )
{
#no new package installed.
break
}
else {
notInstalledPackageCount = length(new.packages) + length(new.bio.packages)
}
}
#Load Packages
suc = unlist ( lapply(list.of.packages, require, character.only = TRUE) )
if(sum(suc) < length(list.of.packages) )
cat ("\n\nWarnning!!!!!! These R packages cannot be loaded:", list.of.packages[!suc] )
suc = unlist ( lapply(list.of.bio.packages, require, character.only = TRUE) )
if(sum(suc) < length(list.of.bio.packages) )
cat ("\n\nWarnning!!!!!! These Bioconductor packages cannot be loaded:", list.of.bio.packages[!suc] )
install.packages(new.packages, repos = "http://cran.rstudio.com/", dependencies = TRUE, quiet = TRUE)
install.packages(c('dplyr', 'gplots', 'ggplot2', 'ggrepel'))
BiocManager::install(c('limma', 'DESeq2', 'AnnotationDbi', 'org.Mn.eg.db', 'ReportingTools', 'GO.db', 'GOstats', 'pathview', 'gage', 'gageData', 'select'))
cd
library(DESeq2)
library(dplyr)
countData = read.csv(C:\Users\Tommy\Desktop\CS286R\STAR_counts3.csv, header= 1)
countData = read.csv(C:\Users\Tommy\Desktop\CS286R\STAR_counts3.csv, header= 1)
countData = read.csv(), header= 1)
setwd C:\Users\Tommy\Desktop\CS286R
setwd "C:\Users\Tommy\Desktop\CS286R"
getwd()
setwd("C:\Users\Tommy\Desktop\CS286R")
setwd("C:/Users/Tommy/Desktop/CS286R")
getwd()
countData = read.csv('STAR_counts3.csv', header=1)
View(countData)
```{r}
```{r, message=false}
```{r, message=FALSE}
```{r, message=FALSE}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(DESeq2)
library(dplyr)
countData = read.csv('STAR_counts3.csv', header=1)
plot(pressure)
setwd("C:/Users/Tommy/Desktop/CS286R")
getwd()
library(DESeq2)
library(dplyr)
countData = read.csv('STAR_counts3.csv', header=1)
View(countData)
rownames(countData) = countData$Geneid
rownames(countData) = countData$gene_name
countData = countData[,]
countData = countData[1,1]
countData = read.csv('STAR_counts3.csv', header=1)
rownames(countData) = countData$gene_name
barplot(colSums(countData)/le6, las=3)
barplot(colSums(countData)/le6, las=3)
colSums(countdata)
colSums(countData)
colSums(countData)
barplot(colSums(countData)/le6, las=3)
countData = countData[,-1]
barplot(colSums(countData)/le6, las=3)
barplot(colSums(countData)/le3 las=3)
barplot(colSums(countData)/le6, las=3)
barplot(colSums(countData)/1e6, las=3)
hist(countData$Asn1, br=100)
#log2 transformation
logCountData = log2(1+countData)
logCountData = log2(1+countData)
hist(countData$Asn1, br=100)
hist(logCountData$Asn1, br=100)
hist(countdata$Asn1)
hist(countData$Asn1)
plot(logCountData[,1], logCountdata[,1])
plot(logCountData[,1], logCountData[,1])
plot(logCountData[,1], logCountData[,2])
plot(logCountData[,1], logCountData[,4])
colData = as.data.frame(cbind(colnames(countData), nitrate, treatment))
nitrate = c("n", "n", "n",
"p", "p", "p",
"p", "p", "p",
"p", "p", "p"
)
treatment = c("control", "control", "control",
"control", "control", "control",
"treatment", "treatment", "treatment",
"treatment", "treatment", "treatment"
)
colData = as.data.frame(cbind(colnames(countData), nitrate, treatment))
colData = as.data.frame(cbind(colnames(countData), nitrate, treatment))
colData
colData = as.data.frame(cbind(colnames(countData), nitrate, treatment), stringsAsFactors = TRUE)
colData
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~nitrate+treatment+nitrate*treatment
)
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~nitrate+treatment+nitrate*treatment
)
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~nitrate+treatment+nitrate*treatment
)
nitrate = c("1", "2", "3",
"1", "2", "3",
"1", "2", "3",
"1", "2", "3"
)
treatment = c("control", "control", "control",
"control", "control", "control",
"treatment", "treatment", "treatment",
"treatment", "treatment", "treatment"
)
colData = as.data.frame(cbind(colnames(countData), nitrate, treatment), stringsAsFactors = TRUE)
colData
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~nitrate+treatment+nitrate*treatment
)
dds = DESeq(dds)
vignette('DESeq2')
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~nitrate+treatment+nitrate*treatment
)
dds = DESeq(dds)
vignette('DESeq2')
nrow(dds)
dds = dds[rowSums(counts(dds)) > 5,]
nrow(dds)
sizeFactors(dds)
library(ggplot2)
rld = rlog(dds)
plotPCA(rld, intgroup = "nitrate")
library(ggplot2)
rld = rlog(dds)
plotPCA(rld, intgroup = "treatment")
library(ggplot2)
rld = rlog(dds)
plotPCA(rld, intgroup = "nitrate", "treatment")
nitrate = c("1", "2", "3",
"1", "2", "3",
"1", "2", "3",
"1", "2", "3"
)
treatment = c("ncontrol", "ncontrol", "ncontrol",
"control", "control", "control",
"treatment", "treatment", "treatment",
"treatment", "treatment", "treatment"
)
nitrate = c("n", "n", "n",
"p", "p", "p",
"p", "p", "p",
"p", "p", "p"
)
treatment = c("ncontrol", "ncontrol", "ncontrol",
"control", "control", "control",
"treatment", "treatment", "treatment",
"treatment", "treatment", "treatment"
)
colData = as.data.frame(cbind(colnames(countData), nitrate, treatment), stringsAsFactors = TRUE)
colData
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~nitrate+treatment+nitrate*treatment
)
nitrate = c("1", "2", "3",
"1", "2", "3",
"1", "2", "3",
"1", "2", "3"
)
treatment = c("control", "control", "control",
"control", "control", "control",
"treatment", "treatment", "treatment",
"treatment", "treatment", "treatment"
)
colData = as.data.frame(cbind(colnames(countData), nitrate, treatment), stringsAsFactors = TRUE)
colData
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~nitrate+treatment+nitrate*treatment
)
dds = DESeq(dds)
vignette('DESeq2')
nrow(dds)
detectGroups <- function(x)
tem <- gsub("[0-9]*$", "", x)
tem <- gsub("_$", "", tem);
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~V1+treatment+V1*treatment
)
treatment = c("control", "control", "control",
"control", "control", "control",
"treatment", "treatment", "treatment",
"treatment", "treatment", "treatment"
)
colData = as.data.frame(cbind(colnames(countData), treatment), stringsAsFactors = TRUE)
colData
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ V1 + treatment + V1:treatment
)
?results
treatment = c("control", "control", "control",
"control", "control", "control",
"treatment", "treatment", "treatment",
"treatment", "treatment", "treatment"
)
conditions = c("1", "1", "1",
"2", "2", "2",
"3", "3", "3",
"4", "4", "4"
)
colData = as.data.frame(cbind(colnames(countData), treatment), stringsAsFactors = TRUE)
colData
colData = as.data.frame(cbind(colnames(countData), treatment, conditions), stringsAsFactors = TRUE)
colData
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ conditions + treatment + conditions:treatment
)
colData = as.data.frame(cbind(colnames(countData), treatment, conditions), stringsAsFactors = TRUE)
colData
treatment = c("control", "control", "control",
"control", "control", "control",
"treatment", "treatment", "treatment",
"treatment", "treatment", "treatment"
)
(condition <- factor(c(rep("ctl", 3), rep("A", 3), rep("B", 3), rep("C", 3))))
colData = as.data.frame(cbind(colnames(countData), treatment, conditions), stringsAsFactors = TRUE)
colData
treatment = c("control", "control", "control",
"control", "control", "control",
"treatment", "treatment", "treatment",
"treatment", "treatment", "treatment"
)
(condition <- factor(c(rep("ctl", 3), rep("A", 3), rep("B", 3), rep("C", 3))))
colData = as.data.frame(cbind(colnames(countData), treatment, conditions), stringsAsFactors = TRUE)
colData
colData = as.data.frame(cbind(colnames(countData), treatment, conditions), stringsAsFactors = TRUE)
colData.head(12)
colData = as.data.frame(cbind(colnames(countData), treatment, conditions), stringsAsFactors = TRUE)
colData.head()
colData = as.data.frame(cbind(colnames(countData), treatment, conditions), stringsAsFactors = TRUE)
colData
conditions = c("1", "1", "1",
"2", "2", "2",
"3", "3", "3",
"4", "4", "4"
)
colData = as.data.frame(cbind(colnames(countData), conditions), stringsAsFactors = TRUE)
colData
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ conditions + V1 + conditions:V1
)
treatment = c("control", "control", "control",
"control", "control", "control",
"treatment", "treatment", "treatment",
"treatment", "treatment", "treatment"
)
colData = as.data.frame(cbind(colnames(countData), treatment), stringsAsFactors = TRUE)
colData
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ conditions
)
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ treatment
)
dds = DESeq(dds)
vignette('DESeq2')
nrow(dds)
dds = dds[rowSums(counts(dds)) > 5,]
nrow(dds)
sizeFactors(dds)
library(ggplot2)
rld = rlog(dds)
plotPCA(rld, intgroup = "nitrate",treatment")
library(ggplot2)
rld = rlog(dds)
plotPCA(rld, intgroup = "treatment")
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ treatment + V1
)
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ treatment
)
dds = DESeq(dds)
vignette('DESeq2')
nrow(dds)
dds = dds[rowSums(counts(dds)) > 5,]
nrow(dds)
sizeFactors(dds)
dds <- DESeq(dds)
res <- results(dds)
dds <- DESeq(dds)
res <- results(dds)
res
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ treatment
)
dds = DESeq(dds)
vignette('DESeq2')
nrow(dds)
dds = dds[rowSums(counts(dds)) > 5,]
nrow(dds)
sizeFactors(dds)
library(ggplot2)
rld = rlog(dds)
plotPCA(rld, intgroup = "treatment", "V1")
library(ggplot2)
rld = rlog(dds)
plotPCA(rld, intgroup = c("treatment", "V1"))
detectGroups <- function(x){
tem <- gsub("[0-9]*$", "", x)
tem <- gsub("_$", "", tem);
tem <- gsub("_Rep$", "", tem);
tem <- gsub("_rep$", "", tem);
tem <- gsub("_REP$", "", tem)
return( tem )
}
dist2 <- function(x, ...){
as.dist(1-cor(t(x), method="pearson"))
}
